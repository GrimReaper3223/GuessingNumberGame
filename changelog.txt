
*** GuessingNumberGame v3.0_ALPHA ***

Glossary:

+ Added;
- Removed;
* Fixed;
! Bugs;
>> To do;
$ Changed;
# Deprecated;


Changelog:

    V3.0_ALPHA [Stable];

    Maven Compiler Plugin Version: 3.11.0;
    Maven Model Builder Version: 3.9.4;
    Maven Jar Plugin Version: 3.3.0;
        
        + ADDED
        
            + A class called "Assets" was added to manage the initialization and verification of all static objects;
            + Added unique Scan method for using Scanners to simplify and polish performance and code writing;
            
        - REMOVED

            - Removed some unnecessary files that do not match the project structure;
            - Removed some imports that became useless due to the app's coding progression;
            - Some instances no longer exist in this new version;
            
        * FIXED
            
            * Bug related to application performance fixed;
            * Fixed some bugs that caused the "NullPointerException" error in some execution areas;
            * Fixed code escape bugs, causing unexpected app closures;
            * Some small bugs fixed;

        ! BUGS
        
            ! Without a "default" label, any number entered that is not recognized 
              as an option will cause the app to close early, creating a code leak. (later this will be corrected);
            
            ! Inconsistencies when trying to clear the scanner buffer when code 
              execution enters catch(), in the try {} block. This causes option messages to not be shown. 
              This will also be fixed in the next update;

        >> TODO

            >> Everything that is in the "Bugs" section;
            >> Trying to resolve the error that says that the 'assets' object, in 'Runtime', is not being used;
            >> Learn to create tests with JUnit and improve the code implementation performance as a whole;

        $ CHANGED

            $ Changed instance execution mode. Now all instances are started before the app runs;
            $ Functions nested in single files fragmented into multiple files for better performance and readability;
            $ Cleaner and more organized menu class
            $ Cleaner start class with syntax and logic organization;
            $ Perfectly oriented Settings class with more complete and descriptive comments;
            $ Scan class with a more organized and simple syntax;
            $ More organized Difficulty class;
            $ More organized standard game structure class with cleaner logic and more fluid execution;
            $ Assets class modeled for better visual presentation and better performance and logical maintainability;
            $ .bat file for Windows users with boot code updated to run the newest version (3.0_ALPHA);

        # DEPRECATED

            # "Guessing Number Game-2.0_BETA.jar" file is deprecated;
            # "Runtime.bat" file v2.0_BETA is deprecated;
            # "MainActivity.java" file v2.0_BETA is deprecated;
            # "MenuInterface.java" file v2.0_BETA is deprecated;
            # All binaries in path target/classes/com/app/guessingnumbergame is deprecated;

_________________________________________________________________________________________________________________________________________________
_________________________________________________________________________________________________________________________________________________
_________________________________________________________________________________________________________________________________________________

    v2.0_BETA: 
        
        + ADDED

            + Added a 'restartLabel' label inside the 'scanner()' method, present in the game structure;
            + In the level structure class, a basic construction method was added 
              and also the use of the keyword 'this' was used to refer to the objects of that class in question;

            + Javadoc added;
            + More precise comments about the code were added;


        - REMOVED

            - Removed Easy, Intermediary, Hard, Veteran and Custom levels. Now the level 
              system uses a standard file (old custom file, however changed), and in it, 
              depending on the level that the user chooses, there will be values that 
              will be inserted in its operating variables;

            - Initial method 'randomize()', present in the game's structural file, now becomes 'void'. 'return' has been removed;


        * FIXED

            * Fixed unnecessary instantiation of game structural class done inside 'settings()' method, inside 'while();' block;

            * Fixed the bug that did not allow changing the settings more than once 
              for the 'custom' game type, negating the code flow control boolean, as 
              soon as it became positive to exit the 'while() loop ' inside 'settings()';

            * Fixed the bug that did not allow changing the level to 'easy' in the game's difficulty settings;
            * In the game structure class, the error message bank 'exceptionsMsgBank[ ]' 
              has been moved inside the void method 'scanner()', so that it is started as soon as this method is called;

            * Some other minor bugs were fixed;


        ! BUGS

            ! All 'default' labels for all 'switch()' have been tested and may be 
              buggy depending on user behavior. Review of error handling will be required in these areas.
              In a next update I will bring this;

            ! The code may be a bit messy, which can lead to unexpected logic bugs. 
              This will also be corrected in the future. This update focused on project performance against levels;


        $ CHANGED

            $ Most of the variables were called by the 'private' identifier so that 
              inconsistencies with other parts of the code do not occur;

            $ Names of some variables and methods have been changed for better readability and assimilation;
            $ Current difficulty level name 'Easy - default' has been changed to 'Easy'


        >> TODO

            >> Test the 'static' modifiers and try to dismember main menu     
            methods in other classes to improve the maintenance of the code as
            whole and to facilitate the implementation of new functionalities;

            >> Check and test the 'default' labels of all 'switch()' and also all
               'catch()' blocks to better handle excesses that can cause bugs;

            >> Learn to create tests with JUnit and improve the code implementation performance as a whole;

          
        # DEPRECATED

            # The 'startGame()', 'settings()' and 'difficulty()' methods will 
            be spun off from the main menu class and will have their own classes 
            and their own functions in future releases;

            # The 'difficulty Option' variable may cease to exist within the main menu 
            and will move to the future 'Difficulty' class;

            # The variables 'origin' and 'bound' will no longer exist inside 
            the main menu and will be transferred to the future class 'Settings';

            # Possibly I will create a 'Scanner' class for better control over 
            instances of the native 'Scanner' class. Given that, if this is possible, 
            the 'scanner' object may cease to exist;

            # The verification booleans that are in the main menu 'validCustomGame' and 'controlCodeFlow' 
            could be part of the future class 'Settings';

            # The String that shows the chosen difficulty next to the 'Start Game' 
            option may be part of the future 'Difficulty' class;



    Additional comments:

        Some other small changes and reassignments that were not mentioned above 
        will be made more in the source code of the game's default structure level 
        so that the code itself becomes cleaner and with a more organized logic.